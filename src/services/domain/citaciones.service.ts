import { CitacionMedica } from '@/src/types'

import apiSpringClient from '../api'
import { ENDPOINTS } from '../auth/endpoints'

export const citacionesService = {
	// Obtener citaci√≥n por ID
	obtenerCitacionPorId: async (citacionId: number): Promise<CitacionMedica> => {
		console.log('üîç Obteniendo citaci√≥n por ID:', citacionId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_ID(citacionId))
			console.log('‚úÖ Citaci√≥n obtenida por ID')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaci√≥n por ID:', error)
			throw error
		}
	},

	// Obtener todas las citaciones m√©dicas
	obtenerTodasCitaciones: async (): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo todas las citaciones m√©dicas...')
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.BASE)
			console.log('‚úÖ Citaciones obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones:', error)
			throw error
		}
	},

	// Obtener citaciones por m√©dico
	obtenerCitacionesPorMedico: async (medicoId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para m√©dico:', medicoId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_MEDICO(medicoId))
			console.log('‚úÖ Citaciones del m√©dico obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones del m√©dico:', error)
			throw error
		}
	},

	// Obtener citaciones por campa√±a
	obtenerCitacionesPorCampana: async (campanaId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para campa√±a:', campanaId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_CAMPANA(campanaId))
			console.log('‚úÖ Citaciones de la campa√±a obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones de la campa√±a:', error)
			throw error
		}
	},

	// Actualizar citaci√≥n completa (PUT) - m√©todo principal
	actualizarCitacion: async (citacionId: number, citacionData: Partial<CitacionMedica>): Promise<CitacionMedica> => {
		console.log('üîÑ Actualizando citaci√≥n completa:', citacionId)
		try {
			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionData)
			console.log('‚úÖ Citaci√≥n actualizada completamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar citaci√≥n:', error)
			throw error
		}
	},

	// Actualizar solo estado de citaci√≥n (PATCH) - m√©todo alternativo m√°s simple
	actualizarEstadoCitacion: async (citacionId: number, estado: string): Promise<CitacionMedica> => {
		console.log('üîÑ Actualizando estado de citaci√≥n:', citacionId, estado)
		try {
			const response = await apiSpringClient.patch(ENDPOINTS.CITACIONES.ACTUALIZAR_ESTADO(citacionId), { estado })
			console.log('‚úÖ Estado de citaci√≥n actualizado')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar estado de citaci√≥n:', error)
			throw error
		}
	},

	// Cancelar citaci√≥n (auxiliares) - obtiene primero y luego actualiza
	cancelarCitacion: async (citacionId: number): Promise<CitacionMedica> => {
		console.log('‚ùå Cancelando citaci√≥n:', citacionId)
		try {
			// Obtener la citaci√≥n completa primero
			const citacionActual = await citacionesService.obtenerCitacionPorId(citacionId)

			// Actualizar solo el estado
			const citacionActualizada = {
				...citacionActual,
				estado: 'CANCELADA' as const
			}

			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionActualizada)
			console.log('‚úÖ Citaci√≥n cancelada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al cancelar citaci√≥n:', error)
			throw error
		}
	},

	// Reprogramar citaci√≥n (auxiliares) - obtiene primero y luego actualiza
	reprogramarCitacion: async (citacionId: number): Promise<CitacionMedica> => {
		console.log('üìÖ Reprogramando citaci√≥n:', citacionId)
		try {
			// Obtener la citaci√≥n completa primero
			const citacionActual = await citacionesService.obtenerCitacionPorId(citacionId)

			// Actualizar solo el estado
			const citacionActualizada = {
				...citacionActual,
				estado: 'AGENDADA' as const
			}

			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionActualizada)
			console.log('‚úÖ Citaci√≥n reprogramada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al reprogramar citaci√≥n:', error)
			throw error
		}
	},

	// Marcar citaci√≥n como atendida (m√©dicos)
	atenderCitacion: async (citacionId: number): Promise<CitacionMedica> => {
		console.log('üë®‚Äç‚öïÔ∏è Marcando citaci√≥n como atendida:', citacionId)
		try {
			// Obtener la citaci√≥n completa primero
			const citacionActual = await citacionesService.obtenerCitacionPorId(citacionId)

			// Actualizar estado y hora de atenci√≥n
			const horaAtencion = new Date().toISOString()
			const citacionActualizada = {
				...citacionActual,
				estado: 'ATENDIDA' as const,
				horaAtencion
			}

			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionActualizada)
			console.log('‚úÖ Citaci√≥n marcada como atendida')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al marcar citaci√≥n como atendida:', error)
			throw error
		}
	}
} 