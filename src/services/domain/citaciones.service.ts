import { Citacion, EstadoCitacion } from '@/src/types'

import apiSpringClient from '../api'
import { ENDPOINTS } from '../auth/endpoints'

export const citacionesService = {
	// Obtener citaci√≥n por ID
	obtenerCitacionPorId: async (citacionId: number): Promise<Citacion> => {
		console.log('üîç Obteniendo citaci√≥n por ID:', citacionId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_ID(citacionId))
			console.log('‚úÖ Citaci√≥n obtenida por ID')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaci√≥n por ID:', error)
			throw error
		}
	},

	// Obtener todas las citaciones m√©dicas
	obtenerTodasCitaciones: async (): Promise<Citacion[]> => {
		console.log('üîç Obteniendo todas las citaciones m√©dicas...')
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.BASE)
			console.log('‚úÖ Citaciones obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones:', error)
			throw error
		}
	},

	// Obtener citaciones por m√©dico
	obtenerCitacionesPorMedico: async (medicoId: number): Promise<Citacion[]> => {
		console.log('üîç Obteniendo citaciones para m√©dico:', medicoId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_MEDICO(medicoId))
			console.log('‚úÖ Citaciones del m√©dico obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones del m√©dico:', error)
			throw error
		}
	},

	// Obtener citaciones por campa√±a
	obtenerCitacionesPorCampana: async (campanaId: number): Promise<Citacion[]> => {
		console.log('üîç Obteniendo citaciones para campa√±a:', campanaId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.CITACIONES.POR_CAMPANA(campanaId))
			console.log('‚úÖ Citaciones de la campa√±a obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones de la campa√±a:', error)
			throw error
		}
	},

	// Actualizar citaci√≥n completa (PUT) - m√©todo principal
	actualizarCitacion: async (citacionId: number, citacionData: Partial<Citacion>): Promise<Citacion> => {
		console.log('üîÑ Actualizando citaci√≥n completa:', citacionId)
		try {
			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionData)
			console.log('‚úÖ Citaci√≥n actualizada completamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar citaci√≥n:', error)
			throw error
		}
	},

	// Actualizar estado de citaci√≥n (auxiliares/m√©dicos)
	actualizarEstadoCitacion: async (citacionId: number, nuevoEstado: EstadoCitacion): Promise<any> => {
		console.log('üîÑ Actualizando estado de citaci√≥n:', citacionId, nuevoEstado)
		try {
			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR_ESTADO(citacionId), {
				estado: nuevoEstado
			})
			console.log('‚úÖ Estado de citaci√≥n actualizado')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar estado de citaci√≥n:', error)
			throw error
		}
	},

	// Cancelar citaci√≥n (auxiliares) - obtiene primero y luego actualiza
	cancelarCitacion: async (citacionId: number): Promise<Citacion> => {
		console.log('‚ùå Cancelando citaci√≥n:', citacionId)
		try {
			// Obtener la citaci√≥n completa primero
			const citacionActual = await citacionesService.obtenerCitacionPorId(citacionId)

			// Actualizar solo el estado
			const citacionActualizada = {
				...citacionActual,
				estado: 'CANCELADA' as const
			}

			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionActualizada)
			console.log('‚úÖ Citaci√≥n cancelada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al cancelar citaci√≥n:', error)
			throw error
		}
	},

	// NUEVA FUNCIONALIDAD: Cancelaci√≥n avanzada para auxiliares
	// Cancela, elimina, desvincula paciente y reorganiza horarios
	cancelarYEliminarCitacion: async (citacionId: number): Promise<{
		citacionEliminada: boolean
		pacienteDesvinculado: boolean
		horariosReorganizados: number
		mensaje: string
	}> => {
		console.log('üóëÔ∏è Iniciando cancelaci√≥n avanzada de citaci√≥n:', citacionId)
		
		try {
			// 1. Obtener datos de la citaci√≥n antes de eliminarla
			const citacion = await citacionesService.obtenerCitacionPorId(citacionId)
			const { pacienteId, campanaId } = citacion
			
			console.log('üìã Datos de la citaci√≥n:', { pacienteId, campanaId })

			// 2. Obtener todas las citaciones de la campa√±a para reorganizar
			const citacionesCampana = await citacionesService.obtenerCitacionesPorCampana(campanaId)
			
			// Filtrar citaciones posteriores a la que se va a cancelar
			const citacionesPosteriores = citacionesCampana
				.filter(c => c.id !== citacionId && c.estado === EstadoCitacion.AGENDADA)
				.filter(c => new Date(c.horaProgramada) > new Date(citacion.horaProgramada))
				.sort((a, b) => new Date(a.horaProgramada).getTime() - new Date(b.horaProgramada).getTime())

			console.log(`üìÖ Citaciones posteriores a reorganizar: ${citacionesPosteriores.length}`)

			// 3. Eliminar la citaci√≥n de la base de datos
			await apiSpringClient.delete(ENDPOINTS.CITACIONES.ELIMINAR(citacionId))
			console.log('‚úÖ Citaci√≥n eliminada de la base de datos')

			// 4. Desvincular paciente de la campa√±a
			let pacienteDesvinculado = false
			try {
				// Importar din√°micamente para evitar dependencias circulares
				const { inscripcionesService } = await import('./inscripciones.service')
				
				// Obtener informaci√≥n del paciente para conseguir el usuarioId
				const pacienteResponse = await apiSpringClient.get(`${ENDPOINTS.PACIENTES.BASE}/${pacienteId}`)
				const paciente = pacienteResponse.data
				
				if (paciente?.usuarioId) {
					// Buscar la inscripci√≥n del usuario en la campa√±a
					const inscripciones = await inscripcionesService.obtenerInscripcionesPorUsuario(paciente.usuarioId)
					const inscripcionCampana = inscripciones.find(inscripcion => 
						inscripcion.campanaId === campanaId
					)

					if (inscripcionCampana) {
						await inscripcionesService.eliminarInscripcion(inscripcionCampana.id)
						pacienteDesvinculado = true
						console.log('üîì Paciente desvinculado de la campa√±a')
					}
				}
			} catch (error) {
				console.error('‚ùå Error al desvincular paciente:', error)
			}

			// 5. Reorganizar horarios de citaciones posteriores
			let horariosReorganizados = 0
			if (citacionesPosteriores.length > 0) {
				const duracionCita = citacion.duracionEstimada || 30 // minutos por defecto
				
				for (const citacionPosterior of citacionesPosteriores) {
					try {
						// Adelantar la hora de la citaci√≥n por la duraci√≥n de la citaci√≥n cancelada
						const horaActual = new Date(citacionPosterior.horaProgramada)
						const nuevaHora = new Date(horaActual.getTime() - (duracionCita * 60 * 1000))
						
						// Actualizar la citaci√≥n con la nueva hora
						await citacionesService.actualizarCitacion(citacionPosterior.id, {
							...citacionPosterior,
							horaProgramada: nuevaHora.toISOString()
						})
						
						horariosReorganizados++
						console.log(`‚è∞ Citaci√≥n ${citacionPosterior.id} reorganizada: ${horaActual.toLocaleTimeString()} ‚Üí ${nuevaHora.toLocaleTimeString()}`)
					} catch (error) {
						console.error(`‚ùå Error reorganizando citaci√≥n ${citacionPosterior.id}:`, error)
					}
				}
			}

			const resultado = {
				citacionEliminada: true,
				pacienteDesvinculado,
				horariosReorganizados,
				mensaje: `Citaci√≥n eliminada exitosamente. ${pacienteDesvinculado ? 'Paciente desvinculado. ' : ''}${horariosReorganizados} horarios reorganizados.`
			}

			console.log('‚úÖ Cancelaci√≥n avanzada completada:', resultado)
			return resultado

		} catch (error) {
			console.error('‚ùå Error en cancelaci√≥n avanzada:', error)
			throw new Error(`Error al cancelar citaci√≥n: ${error instanceof Error ? error.message : 'Error desconocido'}`)
		}
	},

	// Reprogramar citaci√≥n (auxiliares) - obtiene primero y luego actualiza
	reprogramarCitacion: async (citacionId: number): Promise<Citacion> => {
		console.log('üìÖ Reprogramando citaci√≥n:', citacionId)
		try {
			// Obtener la citaci√≥n completa primero
			const citacionActual = await citacionesService.obtenerCitacionPorId(citacionId)

			// Actualizar solo el estado
			const citacionActualizada = {
				...citacionActual,
				estado: 'AGENDADA' as const
			}

			const response = await apiSpringClient.put(ENDPOINTS.CITACIONES.ACTUALIZAR(citacionId), citacionActualizada)
			console.log('‚úÖ Citaci√≥n reprogramada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al reprogramar citaci√≥n:', error)
			throw error
		}
	},

	// Marcar citaci√≥n como atendida con seguimientos autom√°ticos (m√©dicos)
	marcarComoAtendida: async (citacionId: number): Promise<any> => {
		console.log('ü©∫ Marcando citaci√≥n como atendida:', citacionId)
		try {
			const response = await apiSpringClient.put(`${ENDPOINTS.CITACIONES.BASE}/${citacionId}/marcar-atendida`)
			console.log('‚úÖ Citaci√≥n marcada como atendida - Seguimientos iniciados')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al marcar citaci√≥n como atendida:', error)
			throw error
		}
	},

	// Completar atenci√≥n m√©dica con hora espec√≠fica
	completarAtencion: async (citacionId: number, horaAtencion?: string): Promise<any> => {
		console.log('üìã Completando atenci√≥n m√©dica:', citacionId)
		try {
			const payload = horaAtencion ? { hora_atencion: horaAtencion } : {}
			const response = await apiSpringClient.put(`${ENDPOINTS.CITACIONES.BASE}/${citacionId}/completar-atencion`, payload)
			console.log('‚úÖ Atenci√≥n m√©dica completada')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al completar atenci√≥n m√©dica:', error)
			throw error
		}
	}
} 