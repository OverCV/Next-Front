import { PrediccionRiesgoCV, PrediccionGuardada, HealthCheck } from '@/src/types'

import apiSpringClient from '../api'
import { ENDPOINTS } from '../auth/endpoints'

export const prediccionesService = {
	// Verificar estado de la API de FastAPI
	verificarSaludFastAPI: async (): Promise<HealthCheck> => {
		console.log('üîç Verificando estado de FastAPI...')
		try {
			const response = await fetch(ENDPOINTS.FASTAPI.HEALTH, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json',
				},
			})

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ FastAPI est√° disponible:', data)
			return data
		} catch (error) {
			console.error('‚ùå Error al verificar FastAPI:', error)
			throw error
		}
	},

	// Predecir riesgo cardiovascular (FastAPI)
	predecirRiesgoCardiovascular: async (pacienteId: number, campanaId: number): Promise<any> => {
		console.log('üîÆ Prediciendo riesgo cardiovascular...')
		try {
			const response = await fetch(ENDPOINTS.FASTAPI.PREDECIR_RIESGO(pacienteId, campanaId), {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
			})

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ Predicci√≥n completada:', data)
			return data
		} catch (error) {
			console.error('‚ùå Error al predecir riesgo:', error)
			throw error
		}
	},

	// Actualizar priorizaci√≥n por triaje (FastAPI)
	actualizarPriorizacionPorTriaje: async (pacienteId: number): Promise<any> => {
		console.log('üîÑ Actualizando priorizaci√≥n por triaje para paciente:', pacienteId)
		try {
			const response = await fetch(ENDPOINTS.FASTAPI.PRIORIZACION.ACTUALIZAR_POR_TRIAJE, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ paciente_id: pacienteId }),
			})

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ Priorizaci√≥n actualizada:', data)
			return data
		} catch (error) {
			console.error('‚ùå Error al actualizar priorizaci√≥n:', error)
			throw error
		}
	},

	// Obtener pacientes priorizados de una campa√±a (FastAPI)
	obtenerPacientesPriorizados: async (campanaId: number): Promise<any> => {
		console.log('üìä Obteniendo pacientes priorizados para campa√±a:', campanaId)
		try {
			const response = await fetch(ENDPOINTS.FASTAPI.PRIORIZACION.CAMPANA_PACIENTES(campanaId), {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json',
				},
			})

			if (!response.ok) {
				// Si es un error 404 o similar, podr√≠a ser que no hay pacientes inscritos
				if (response.status === 404) {
					console.log('‚ÑπÔ∏è No se encontraron pacientes priorizados para la campa√±a:', campanaId)
					return [] // Retornar array vac√≠o en lugar de lanzar error
				}
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ Pacientes priorizados obtenidos:', data)
			return data || [] // Asegurar que siempre se retorne un array
		} catch (error: any) {
			console.error('‚ùå Error al obtener pacientes priorizados:', error)
			
			// Si el error contiene mensajes que sugieren que no hay pacientes, retornar array vac√≠o
			const errorMessage = error?.message || error?.toString() || ''
			if (errorMessage.includes('No se encontraron pacientes') || 
				errorMessage.includes('No patients found') ||
				errorMessage.includes('404')) {
				console.log('‚ÑπÔ∏è Interpretando como campa√±a sin pacientes inscritos')
				return []
			}
			
			throw error
		}
	},

	// Generar priorizaci√≥n manual (FastAPI)
	generarPriorizacionManual: async (campanaId: number): Promise<any> => {
		console.log('üîß Generando priorizaci√≥n manual para campa√±a:', campanaId)
		try {
			const response = await fetch(ENDPOINTS.FASTAPI.PRIORIZACION.GENERAR_MANUAL(campanaId), {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
			})

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ Priorizaci√≥n manual generada:', data)
			return data
		} catch (error) {
			console.error('‚ùå Error al generar priorizaci√≥n manual:', error)
			throw error
		}
	},

	// Obtener citaciones de un paciente
	obtenerCitacionesPaciente: async (pacienteId: number, estado?: string): Promise<any> => {
		console.log('üìÖ Obteniendo citaciones para paciente:', pacienteId)
		try {
			let url = ENDPOINTS.FASTAPI.PRIORIZACION.CITACIONES_PACIENTE(pacienteId)
			if (estado) {
				url += `?estado=${estado}`
			}
			
			const response = await fetch(url, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json',
				},
			})

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}

			const data = await response.json()
			console.log('‚úÖ Citaciones obtenidas:', data)
			return data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones:', error)
			throw error
		}
	},

	// Obtener todas las predicciones guardadas
	obtenerPredicciones: async (): Promise<PrediccionGuardada[]> => {
		console.log('üîç Obteniendo predicciones guardadas...')
		try {
			const response = await apiSpringClient.get(ENDPOINTS.PREDICCIONES.BASE)
			console.log('‚úÖ Predicciones obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener predicciones:', error)
			throw error
		}
	},

	// Obtener predicciones por paciente
	obtenerPrediccionesPorPaciente: async (pacienteId: number): Promise<PrediccionGuardada[]> => {
		console.log('üîç Obteniendo predicciones para paciente:', pacienteId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.PREDICCIONES.POR_PACIENTE(pacienteId))
			console.log('‚úÖ Predicciones del paciente obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener predicciones del paciente:', error)
			throw error
		}
	},

	// Obtener predicciones por campa√±a
	obtenerPrediccionesPorCampana: async (campanaId: number): Promise<PrediccionGuardada[]> => {
		console.log('üîç Obteniendo predicciones para campa√±a:', campanaId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.PREDICCIONES.POR_CAMPANA(campanaId))
			console.log('‚úÖ Predicciones de la campa√±a obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener predicciones de la campa√±a:', error)
			throw error
		}
	}
} 