import apiClient from '../api'
import { ENDPOINTS } from '../auth/endpoints'

export interface CitacionMedica {
	id: number
	pacienteId: number
	campanaId: number
	medicoId: number
	horaProgramada: string
	horaAtencion?: string
	duracionEstimada: number
	estado: 'PROGRAMADA' | 'ATENDIDA' | 'CANCELADA' | 'NO_ASISTIO'
	prediccionAsistencia: number
	codigoTicket: string
	notas?: string
}

export interface DatoClinico {
	id?: number
	pacienteId: number
	presionSistolica: number
	presionDiastolica: number
	frecuenciaCardiacaMin: number
	frecuenciaCardiacaMax: number
	saturacionOxigeno: number
	temperatura: number
	colesterolTotal: number
	hdl: number
	observaciones?: string
	fechaMedicion: string
}

export interface TriajePaciente {
	id: number
	pacienteId: number
	edad: number
	actividadFisica: boolean
	peso: number
	estatura: number
	tabaquismo: boolean
	alcoholismo: boolean
	diabetes: boolean
	dolorPecho: boolean
	dolorIrradiado: boolean
	sudoracion: boolean
	nauseas: boolean
	antecedentesCardiacos: boolean
	hipertension: boolean
	fechaTriaje: string
	descripcion?: string
}

export interface PacienteInfo {
	id: number
	fechaNacimiento: string
	genero: string
	direccion: string
	tipoSangre: string
	localizacionId: number
	usuarioId: number
}

export interface UsuarioInfo {
	id: number
	nombres: string
	apellidos: string
	correo: string
	celular: string
	tipoIdentificacion: string
	identificacion: string
}

export interface PacienteCompleto {
	paciente: PacienteInfo
	usuario: UsuarioInfo
	triajes: TriajePaciente[]
	datosClinicosRecientes: DatoClinico[]
}

export const medicosService = {
	// Obtener todas las citaciones m√©dicas
	obtenerCitacionesMedicas: async (): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones m√©dicas...')
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.BASE)
			console.log('‚úÖ Citaciones obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones:', error)
			throw error
		}
	},

	// Obtener citaciones por m√©dico
	obtenerCitacionesPorMedico: async (medicoId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para m√©dico:', medicoId)
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.POR_MEDICO(medicoId))
			console.log('‚úÖ Citaciones del m√©dico obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones del m√©dico:', error)
			throw error
		}
	},

	// Obtener citaciones por campa√±a
	obtenerCitacionesPorCampana: async (campanaId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para campa√±a:', campanaId)
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.POR_CAMPANA(campanaId))
			console.log('‚úÖ Citaciones de la campa√±a obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones de la campa√±a:', error)
			throw error
		}
	},

	// Actualizar estado de citaci√≥n
	actualizarEstadoCitacion: async (citacionId: number, estado: string): Promise<CitacionMedica> => {
		console.log('üîÑ Actualizando estado de citaci√≥n:', citacionId, estado)
		try {
			const response = await apiClient.patch(ENDPOINTS.CITACIONES.ACTUALIZAR_ESTADO(citacionId), { estado })
			console.log('‚úÖ Estado de citaci√≥n actualizado')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar estado de citaci√≥n:', error)
			throw error
		}
	},

	// Marcar citaci√≥n como atendida
	atenderCitacion: async (citacionId: number): Promise<CitacionMedica> => {
		console.log('üë®‚Äç‚öïÔ∏è Marcando citaci√≥n como atendida:', citacionId)
		try {
			const horaAtencion = new Date().toISOString()
			const response = await apiClient.patch(ENDPOINTS.CITACIONES.ACTUALIZAR_ESTADO(citacionId), {
				estado: 'ATENDIDA',
				horaAtencion
			})
			console.log('‚úÖ Citaci√≥n marcada como atendida')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al marcar citaci√≥n como atendida:', error)
			throw error
		}
	},

	// Obtener todos los datos cl√≠nicos
	obtenerDatosClinicos: async (): Promise<DatoClinico[]> => {
		console.log('üîç Obteniendo datos cl√≠nicos...')
		try {
			const response = await apiClient.get(ENDPOINTS.DATOS_CLINICOS.BASE)
			console.log('‚úÖ Datos cl√≠nicos obtenidos:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener datos cl√≠nicos:', error)
			throw error
		}
	},

	// Obtener datos cl√≠nicos por paciente
	obtenerDatosClinicosPorPaciente: async (pacienteId: number): Promise<DatoClinico[]> => {
		console.log('üîç Obteniendo datos cl√≠nicos para paciente:', pacienteId)
		try {
			const response = await apiClient.get(ENDPOINTS.DATOS_CLINICOS.POR_PACIENTE(pacienteId))
			console.log('‚úÖ Datos cl√≠nicos del paciente obtenidos:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener datos cl√≠nicos del paciente:', error)
			throw error
		}
	},

	// Crear datos cl√≠nicos
	crearDatosClinicos: async (datos: Omit<DatoClinico, 'id'>): Promise<DatoClinico> => {
		console.log('üìù Creando datos cl√≠nicos para paciente:', datos.pacienteId)
		try {
			const response = await apiClient.post(ENDPOINTS.DATOS_CLINICOS.CREAR, datos)
			console.log('‚úÖ Datos cl√≠nicos creados exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al crear datos cl√≠nicos:', error)
			throw error
		}
	},

	// Actualizar datos cl√≠nicos
	actualizarDatosClinicos: async (id: number, datos: Partial<DatoClinico>): Promise<DatoClinico> => {
		console.log('üîÑ Actualizando datos cl√≠nicos:', id)
		try {
			const response = await apiClient.put(ENDPOINTS.DATOS_CLINICOS.ACTUALIZAR(id), datos)
			console.log('‚úÖ Datos cl√≠nicos actualizados exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar datos cl√≠nicos:', error)
			throw error
		}
	},

	// Obtener triajes de un paciente
	obtenerTriajesPorPaciente: async (pacienteId: number): Promise<TriajePaciente[]> => {
		console.log('üîç Obteniendo triajes para paciente:', pacienteId)
		try {
			const response = await apiClient.get(ENDPOINTS.TRIAJES.POR_PACIENTE(pacienteId))
			console.log('‚úÖ Triajes del paciente obtenidos:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener triajes del paciente:', error)
			throw error
		}
	},

	// Obtener informaci√≥n del paciente
	obtenerPaciente: async (pacienteId: number): Promise<PacienteInfo> => {
		console.log('üîç Obteniendo informaci√≥n del paciente:', pacienteId)
		try {
			const response = await apiClient.get(ENDPOINTS.PACIENTES.POR_ID(pacienteId))
			console.log('‚úÖ Informaci√≥n del paciente obtenida')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener informaci√≥n del paciente:', error)
			throw error
		}
	},

	// Obtener informaci√≥n del usuario
	obtenerUsuario: async (usuarioId: number): Promise<UsuarioInfo> => {
		console.log('üîç Obteniendo informaci√≥n del usuario:', usuarioId)
		try {
			const response = await apiClient.get(ENDPOINTS.USUARIOS.PERFIL(usuarioId))
			console.log('‚úÖ Informaci√≥n del usuario obtenida')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener informaci√≥n del usuario:', error)
			throw error
		}
	},

	// Obtener informaci√≥n completa del paciente (consolidada)
	obtenerPacienteCompleto: async (pacienteId: number): Promise<PacienteCompleto> => {
		console.log('üîç Obteniendo informaci√≥n completa del paciente:', pacienteId)
		try {
			// Obtener informaci√≥n b√°sica del paciente
			const paciente = await medicosService.obtenerPaciente(pacienteId)

			// Obtener informaci√≥n del usuario
			const usuario = await medicosService.obtenerUsuario(paciente.usuarioId)

			// Obtener triajes del paciente
			const triajes = await medicosService.obtenerTriajesPorPaciente(pacienteId)

			// Obtener datos cl√≠nicos recientes
			const datosClinicosRecientes = await medicosService.obtenerDatosClinicosPorPaciente(pacienteId)

			console.log('‚úÖ Informaci√≥n completa del paciente obtenida')
			return {
				paciente,
				usuario,
				triajes,
				datosClinicosRecientes
			}
		} catch (error) {
			console.error('‚ùå Error al obtener informaci√≥n completa del paciente:', error)
			throw error
		}
	}
} 