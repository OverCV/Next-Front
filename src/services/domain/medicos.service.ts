import apiClient from '../api'
import { ENDPOINTS } from '../auth/endpoints'

export interface CitacionMedica {
	id: number
	pacienteId: number
	campanaId: number
	medicoId: number
	horaProgramada: string
	horaAtencion?: string
	duracionEstimada: number
	estado: 'PROGRAMADA' | 'ATENDIDA' | 'CANCELADA' | 'NO_ASISTIO'
	prediccionAsistencia: number
	codigoTicket: string
	notas?: string
}

export interface DatoClinico {
	id?: number
	pacienteId: number
	presionSistolica: number
	presionDiastolica: number
	frecuenciaCardiacaMin: number
	frecuenciaCardiacaMax: number
	saturacionOxigeno: number
	temperatura: number
	colesterolTotal: number
	hdl: number
	observaciones?: string
	fechaMedicion: string
}

export const medicosService = {
	// Obtener todas las citaciones m√©dicas
	obtenerCitacionesMedicas: async (): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones m√©dicas...')
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.BASE)
			console.log('‚úÖ Citaciones obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones:', error)
			throw error
		}
	},

	// Obtener citaciones por m√©dico
	obtenerCitacionesPorMedico: async (medicoId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para m√©dico:', medicoId)
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.POR_MEDICO(medicoId))
			console.log('‚úÖ Citaciones del m√©dico obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones del m√©dico:', error)
			throw error
		}
	},

	// Obtener citaciones por campa√±a
	obtenerCitacionesPorCampana: async (campanaId: number): Promise<CitacionMedica[]> => {
		console.log('üîç Obteniendo citaciones para campa√±a:', campanaId)
		try {
			const response = await apiClient.get(ENDPOINTS.CITACIONES.POR_CAMPANA(campanaId))
			console.log('‚úÖ Citaciones de la campa√±a obtenidas:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener citaciones de la campa√±a:', error)
			throw error
		}
	},

	// Actualizar estado de citaci√≥n
	actualizarEstadoCitacion: async (citacionId: number, estado: string): Promise<CitacionMedica> => {
		console.log('üîÑ Actualizando estado de citaci√≥n:', citacionId, estado)
		try {
			const response = await apiClient.patch(ENDPOINTS.CITACIONES.ACTUALIZAR_ESTADO(citacionId), { estado })
			console.log('‚úÖ Estado de citaci√≥n actualizado')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar estado de citaci√≥n:', error)
			throw error
		}
	},

	// Obtener todos los datos cl√≠nicos
	obtenerDatosClinicos: async (): Promise<DatoClinico[]> => {
		console.log('üîç Obteniendo datos cl√≠nicos...')
		try {
			const response = await apiClient.get(ENDPOINTS.DATOS_CLINICOS.BASE)
			console.log('‚úÖ Datos cl√≠nicos obtenidos:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener datos cl√≠nicos:', error)
			throw error
		}
	},

	// Obtener datos cl√≠nicos por paciente
	obtenerDatosClinicosPorPaciente: async (pacienteId: number): Promise<DatoClinico[]> => {
		console.log('üîç Obteniendo datos cl√≠nicos para paciente:', pacienteId)
		try {
			const response = await apiClient.get(ENDPOINTS.DATOS_CLINICOS.POR_PACIENTE(pacienteId))
			console.log('‚úÖ Datos cl√≠nicos del paciente obtenidos:', response.data.length)
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener datos cl√≠nicos del paciente:', error)
			throw error
		}
	},

	// Crear datos cl√≠nicos
	crearDatosClinicos: async (datos: Omit<DatoClinico, 'id'>): Promise<DatoClinico> => {
		console.log('üìù Creando datos cl√≠nicos para paciente:', datos.pacienteId)
		try {
			const response = await apiClient.post(ENDPOINTS.DATOS_CLINICOS.CREAR, datos)
			console.log('‚úÖ Datos cl√≠nicos creados exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al crear datos cl√≠nicos:', error)
			throw error
		}
	},

	// Actualizar datos cl√≠nicos
	actualizarDatosClinicos: async (id: number, datos: Partial<DatoClinico>): Promise<DatoClinico> => {
		console.log('üîÑ Actualizando datos cl√≠nicos:', id)
		try {
			const response = await apiClient.put(ENDPOINTS.DATOS_CLINICOS.ACTUALIZAR(id), datos)
			console.log('‚úÖ Datos cl√≠nicos actualizados exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar datos cl√≠nicos:', error)
			throw error
		}
	}
} 