import { AtencionMedica, CrearAtencionMedica, EstadoAtencion } from '@/src/types'

import apiSpringClient from "../api"
import { ENDPOINTS } from "../auth/endpoints"

export const atencionesService = {
	// Obtener atenci√≥n por ID
	obtenerAtencionPorId: async (atencionId: number): Promise<AtencionMedica> => {
		console.log('üîç Obteniendo atenci√≥n por ID:', atencionId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.ATENCIONES_MEDICAS.POR_ID(atencionId))
			console.log('‚úÖ Atenci√≥n obtenida por ID')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al obtener atenci√≥n por ID:', error)
			throw error
		}
	},

	// Obtener atenci√≥n por citaci√≥n (para verificar si ya existe)
	obtenerAtencionPorCitacion: async (citacionId: number): Promise<AtencionMedica | null> => {
		console.log('üîç Verificando atenci√≥n existente para citaci√≥n:', citacionId)
		try {
			const response = await apiSpringClient.get(ENDPOINTS.ATENCIONES_MEDICAS.POR_CITACION(citacionId))
			console.log('‚úÖ Atenci√≥n encontrada para la citaci√≥n')
			return response.data
		} catch (error: any) {
			// Si es 404, significa que no existe atenci√≥n para esa citaci√≥n
			if (error.response?.status === 404) {
				console.log('‚ÑπÔ∏è No existe atenci√≥n para esta citaci√≥n')
				return null
			}
			console.error('‚ùå Error al verificar atenci√≥n por citaci√≥n:', error)
			throw error
		}
	},

	// Crear nueva atenci√≥n m√©dica
	crearAtencion: async (datosAtencion: CrearAtencionMedica): Promise<AtencionMedica> => {
		console.log('üìù Creando nueva atenci√≥n m√©dica para citaci√≥n:', datosAtencion.citacionId)
		try {
			const response = await apiSpringClient.post(ENDPOINTS.ATENCIONES_MEDICAS.BASE, datosAtencion)
			console.log('‚úÖ Atenci√≥n m√©dica creada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al crear atenci√≥n m√©dica:', error)
			throw error
		}
	},

	// Iniciar atenci√≥n (crear con estado EN_PROCESO)
	iniciarAtencion: async (citacionId: number): Promise<AtencionMedica> => {
		console.log('üöÄüìÖ Iniciando atenci√≥n para citaci√≥n:', citacionId)
		try {
			// Verificar si ya existe una atenci√≥n
			const atencionExistente = await atencionesService.obtenerAtencionPorCitacion(citacionId)

			if (atencionExistente) {
				console.log('‚ÑπÔ∏èüìÖ Ya existe una atenci√≥n para esta citaci√≥n')
				return atencionExistente
			}

			// Crear nueva atenci√≥n
			const nuevaAtencion: CrearAtencionMedica = {
				citacionId,
				fechaHoraInicio: new Date().toISOString(),
				estado: EstadoAtencion.EN_PROCESO
			}

			return await atencionesService.crearAtencion(nuevaAtencion)
		} catch (error) {
			console.error('‚ùåüìÖ Error al iniciar atenci√≥n:', error)
			throw error
		}
	},

	// Finalizar atenci√≥n (actualizar a COMPLETADA)
	finalizarAtencion: async (atencionId: number): Promise<AtencionMedica> => {
		console.log('üèÅüìÖ Finalizando atenci√≥n:', atencionId)
		try {
			const fechaHoraFin = new Date().toISOString()
			const fechaInicio = new Date((await atencionesService.obtenerAtencionPorId(atencionId)).fechaHoraInicio)
			const duracionReal = Math.round((new Date(fechaHoraFin).getTime() - fechaInicio.getTime()) / (1000 * 60)) // en minutos

			const datosActualizacion = {
				fechaHoraFin,
				duracionReal,
				estado: EstadoAtencion.COMPLETADA
			}

			const response = await apiSpringClient.put(ENDPOINTS.ATENCIONES_MEDICAS.ACTUALIZAR(atencionId), datosActualizacion)
			console.log('‚úÖüìÖ Atenci√≥n finalizada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùåüìÖ Error al finalizar atenci√≥n:', error)
			throw error
		}
	},

	// Cancelar atenci√≥n
	cancelarAtencion: async (atencionId: number): Promise<AtencionMedica> => {
		console.log('‚ùå Cancelando atenci√≥n:', atencionId)
		try {
			const datosActualizacion = {
				estado: EstadoAtencion.CANCELADA,
				fechaHoraFin: new Date().toISOString()
			}

			const response = await apiSpringClient.put(ENDPOINTS.ATENCIONES_MEDICAS.ACTUALIZAR(atencionId), datosActualizacion)
			console.log('‚úÖüìÖ Atenci√≥n cancelada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùåüìÖ Error al cancelar atenci√≥n:', error)
			throw error
		}
	},

	// Actualizar atenci√≥n (m√©todo gen√©rico)
	actualizarAtencion: async (atencionId: number, datos: Partial<AtencionMedica>): Promise<AtencionMedica> => {
		console.log('üîÑüìÖ Actualizando atenci√≥n:', atencionId)
		try {
			const response = await apiSpringClient.put(ENDPOINTS.ATENCIONES_MEDICAS.ACTUALIZAR(atencionId), datos)
			console.log('‚úÖüìÖ Atenci√≥n actualizada exitosamente')
			return response.data
		} catch (error) {
			console.error('‚ùå Error al actualizar atenci√≥n:', error)
			throw error
		}
	},

	registrarDiagnostico: async (pacienteId: number, diagnostico: any) => {
		try {
			const response = await apiSpringClient.post(`${ENDPOINTS.ATENCIONES_MEDICAS.BASE}/diagnostico/${pacienteId}`, diagnostico)
			return response.data
		} catch (error) {
			console.error("üìÖ Error al registrar diagn√≥stico:", error)
			throw error
		}
	},

	obtenerHistorialAtenciones: async (pacienteId: number) => {
		try {
			const response = await apiSpringClient.get(`${ENDPOINTS.ATENCIONES_MEDICAS.BASE}/historial/${pacienteId}`)
			return response.data
		} catch (error) {
			console.error("üìÖ Error al obtener historial de atenciones:", error)
			return []
		}
	}
}